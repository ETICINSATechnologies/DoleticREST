<?php

namespace UABundle\Repository;

use GRCBundle\Entity\Contact;
use KernelBundle\Entity\User;
use KernelBundle\Repository\DoleticRepository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends DoleticRepository
{
    public function findByManager(User $user)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.managers', 'm')->where($qb->expr()->eq('m.id', $user->getId()))
            ->orderBy('p.number', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findByContact(Contact $contact)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.contacts', 'c')->where($qb->expr()->eq('c.id', $contact->getId()))
            ->orderBy('p.number', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findByConsultant(User $user)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.consultants', 'c')->where($qb->expr()->eq('c.user', $user->getId()))
            ->orderBy('p.number', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findUnsigned()
    {
        $qb = $this->createQueryBuilder('q')
            ->select('p')
            ->from($this->getClassName(), 'p', 'p.id');
        $qb->andWhere($qb->expr()->isNull('p.signDate'))
            ->andWhere('p.disabled = ?1')
            ->andWhere('p.archived = ?2')
            ->setParameters([1 => false, 2 => false]);
        return $qb->getQuery()->getResult();
    }

    public function findCurrent()
    {
        $qb = $this->createQueryBuilder('q')
            ->select('p')
            ->from($this->getClassName(), 'p', 'p.id');
        $qb->andWhere($qb->expr()->isNotNull('p.signDate'))
            ->andWhere($qb->expr()->isNull('p.endDate'))
            ->andWhere('p.disabled = ?1')
            ->andWhere('p.archived = ?2')
            ->setParameters([1 => false, 2 => false]);
        return $qb->getQuery()->getResult();
    }
}
